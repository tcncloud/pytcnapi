# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api.v1alpha1.agentsmith import service_pb2 as api_dot_v1alpha1_dot_agentsmith_dot_service__pb2


class AgentSmithStub(object):
    """AgentSmith is the Public API for the AgentSmith service. This service provides the methods for public integrations
    to follow agents and/or create virtual agents.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FollowAgent = channel.unary_stream(
                '/api.v1alpha1.agentsmith.AgentSmith/FollowAgent',
                request_serializer=api_dot_v1alpha1_dot_agentsmith_dot_service__pb2.FollowAgentReq.SerializeToString,
                response_deserializer=api_dot_v1alpha1_dot_agentsmith_dot_service__pb2.FollowAgentRes.FromString,
                )


class AgentSmithServicer(object):
    """AgentSmith is the Public API for the AgentSmith service. This service provides the methods for public integrations
    to follow agents and/or create virtual agents.
    """

    def FollowAgent(self, request, context):
        """FollowAgent method find an agent identified by user_id or asm_session_id and return a stream of events
        associated with the current session of the user and long as the session lives regardless if the agent is
        using the omni interface or neo interface.
        When the agent is in a voice session one of the first messages received will be AgentVoiceStartEvent that
        contains a sip dial url that can be used to connect to the agent's voice session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentSmithServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FollowAgent': grpc.unary_stream_rpc_method_handler(
                    servicer.FollowAgent,
                    request_deserializer=api_dot_v1alpha1_dot_agentsmith_dot_service__pb2.FollowAgentReq.FromString,
                    response_serializer=api_dot_v1alpha1_dot_agentsmith_dot_service__pb2.FollowAgentRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.v1alpha1.agentsmith.AgentSmith', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AgentSmith(object):
    """AgentSmith is the Public API for the AgentSmith service. This service provides the methods for public integrations
    to follow agents and/or create virtual agents.
    """

    @staticmethod
    def FollowAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.v1alpha1.agentsmith.AgentSmith/FollowAgent',
            api_dot_v1alpha1_dot_agentsmith_dot_service__pb2.FollowAgentReq.SerializeToString,
            api_dot_v1alpha1_dot_agentsmith_dot_service__pb2.FollowAgentRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
